import os
import sys
import logging
import glob

class Global_Properties():
    """
    This class will record all information about related path env value for entire DUT jobs
    Reason: we do not modify entire script due to change value for specific cases!
    """
    def __init__(self):
        pass
    @property
    def repoLocalPath(self):
        """
        Return string: It is checkout path, which is generated by common lib
        If path is wrong -> raise exit 1
        """
        informationFile = f"{os.getenv('libPath')}/repo_handler/RepoLocalPath.log"
        with open(informationFile, 'r') as info:
            localPath = info.readlines()
        if len(localPath) == 1:
            localPath = localPath[0]
        else:
            logging.error(f"Error: Jenkin input is wrong. Please report to CICD Teams! Now {localPath}")
            sys.exit(1)
        if os.path.isdir(localPath):
            return localPath
        else:
            logging.error(f"Error: Can not find target repo local path. Please report to CICD Teams! Now {localPath}")
            sys.exit(1)

    def _getgitignore(self):
        """
        This method will read git ignore file
        return list of related path
        """
        msnRunning = os.getenv("MSN")
        if None == msnRunning:
            logging.error(f"Error: Could not find MSN environment value: Please report to CICD team!")
            sys.exit(1)
        repoPath = self.repoLocalPath
        gitIgnoreFile = os.path.join(repoPath, '.gitignore')
        with open(gitIgnoreFile, 'r') as info:
            record_informaiton = info.readlines()
        # Re-filter: only get paths which is contain MSN lower
        return [x.replace("\r", "").replace("\n", "") for x in record_informaiton if msnRunning.lower() in x]

    @property
    def TestAppPath(self):
        """
        Return root app path string of DUT
        """
        for path in self._getgitignore():
            if "01_WorkProduct_D/app" in path:
                return f"{self.repoLocalPath}/{path}"

    @property
    def TestPlanPath(self):
        """
        Return root plan path string of DUT
        """
        for path in self._getgitignore():
            if "01_WorkProduct_D/plan" in path:
                return f"{self.repoLocalPath}/{path}"

    @property
    def TestConfigPath(self):
        """
        Return root config path string of DUT
        """
        for path in self._getgitignore():
            if "01_WorkProduct_D/cfg" in path:
                return f"{self.repoLocalPath}/{path}"

    @property
    def jobWorkSpace(self):
        return os.getenv('WORKSPACE').replace("\\", "/")

    @property
    def templateCantataDir(self):
        return os.path.join(self.jobWorkSpace, "scripts", "Prepare_DUT_Project_Stage", "DefaultCanttDir.json")

    @property
    def targetCantataDir(self):
        filePath = os.path.join(self.jobWorkSpace, "scripts", "Prepare_DUT_Project_Stage", "CanttDir.json")
        return filePath.replace("\\", "/")

    @property
    def ipg_cop_recordPath(self):
        return os.path.join(self.jobWorkSpace, "scripts", "Prepare_DUT_Project_Stage", "manualUpdateIPG_COP.json")

    @property
    def moduleRunning(self):
        return os.getenv("MSN")

    @property
    def dutConfigOption(self):
        return os.getenv("DUT_CONFIG")

    @property
    def microSubOption(self):
        return os.getenv("MICRO_SUB_VARIANT")

    @property
    def miroVariantOption(self):
        return os.getenv("MICRO_VARIANT")

    @property
    def projectNumberOption(self):
        return os.getenv("PROJECT")

    @property
    def subProjectOption(self):
        return os.getenv("SUB_PROJECT")

    @property
    def dutTestZipPath(self):
        appPath = self.TestAppPath
        zipFiles = glob.glob(f'{appPath}/*.zip')
        return zipFiles

    @property
    def dictFormatForCanttDir(self):
        """
        This property just record template for reference only.
        """
        template = '''
"Cantata": {
    "Workspace": "Absolute_Workspace",
    "Project": "MicroSubVariant_ConfigNumber"
},
"hw_ip": {
    "modulelower": {
        "MicroSubVariant" : {
            "ConfigNumber": {
                "CC_Include_Path": "Absolute Paths, recursive copy from root path. MO prepare first, then latest external all header resource",
                "CC_Source_Path": "Absolute Paths, latest external driver C resource of module only"
            }
        }
    }
}
'''
        return template

    @property
    def headerSourceSpecific(self):
        registered = {"modulelower": {"subvariantlower": ["List of header file name"]}}
        registered = { 
            "cddemm" : {
                "v4h": ["CDD_Emm_Cfg.h"], 
                "mmicplus": ["CDD_Emm_Cfg.h"]
            },
            "eth" : {
                "s4_g4mh" : ["Eth_ETNB_LLDriver.h"],
                "s4_cr52" : ["Eth_RSW2_LLDriver.h", "Eth_GeneralTypes.h"],
                "v4h"     : ["Eth_AVB_LLDriver.h", "EthIf.h"]
            },
            "wdg" : {
                "s4_g4mh" : ["Wdg_Cfg.h"]
            },
            "cddiccom" : {
                "s4_g4mh" : ["Compiler.h", "SchM_Common.h"],
                "s4_cr52" : ["arm_cr.h", "arm_cr_cp15.h", "arm_cr_mpu.h", "arm_gic.h", "Compiler.h", "Interrupt.h", "SchM_Common.h"],
                "v4h"     : ["arm_cr.h", "arm_cr_cp15.h", "arm_cr_mpu.h", "arm_gic.h", "Compiler.h", "Interrupt.h", "SchM_Common.h"]
            },
            "mcu" : {
                "s4_cr52" : ["Mcu_CPG_LLDriver.h"],
                "v4h"     : ["Mcu_CPG_LLDriver.h"]
            },
            "cddrfso" : {
                "s4_cr52" : ["CDD_Rfso_Reg.h"],
                "v4h"     : ["CDD_Rfso_Reg.h"]
            },
            "port" : {
                "u2a16": ["Port_Device.h"],
                "u2a8": ["Port_Device.h"],
                "u2a6": ["Port_Device.h"],
                "e2h": ["Port_Device.h"],
                "e2m": ["Port_Device.h"],
                "e2uh": ["Port_Device.h"],
                "u2b24": ["Port_Device.h"],
                "u2b20": ["Port_Device.h"],
                "u2b10": ["Port_Device.h"],
                "u2b6": ["Port_Device.h"]
            }
        }
        return registered.get(self.moduleRunning.lower(), {})

    @property
    def cantataDUT_RootWorkspace(self):
        return "C:/Workspace/CantataWorkSpace"

    @property
    def tableDrivenFile(self):
        drivenFilePath = os.path.join(self.jobWorkSpace, "scripts", "Prepare_Stage", "TableDriven.xlsm")
        return drivenFilePath

    @property
    def templateCantataProject(self):
        path = os.path.join(self.jobWorkSpace, "scripts", "Prepare_DUT_Project_Stage", "CantataProject")
        return path

    @property
    def coverageReportSource(self):
        path = os.path.join(self.jobWorkSpace, "scripts", "Create_UnitTest_Report", "CovReportMerge")
        return path

    @property
    def scaleTemplatePath(self):
        path = os.path.join(self.jobWorkSpace, "scripts", "Run_Unit_Test_Stage", "Scale")
        return path

    @property
    def projectName(self):
        return os.getenv("SUB_PROJECT")





